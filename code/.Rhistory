deaths.US.total = c(rep(0,21),tsd.natl['US',])
deaths.US.imported =
table(
as.Date(as.character(subset(yesUS,international_traveler>0&death>0)$reporting.date)) -
as.Date('2019-12-31'))
tmp = rep(0,length(deaths.US.total))
tmp[as.numeric(names(deaths.US.imported))] = deaths.US.imported
deaths.US.imported = tmp
rm(tmp)
deaths.US.local = pmax(0, deaths.US.total - deaths.US.imported)
#=============================================================================#
# simulate imported infections
#=============================================================================#
parameters = read.csv("../data/parameters.csv",sep=',',header=T,row.names=1)
# sample replicates of how many infections have been imported into the US
maxUS = 2e4
rangeUS = sum(yesUS$international_traveler>0,na.rm=T):maxUS
# estimate for asymptomatic proportion based on
# https://www.medrxiv.org/content/10.1101/2020.02.20.20025866v2
PrAsymptomatic = exp(optim(par=c(0,0),fn=function(par){
sum((
c(exp(par[1])/(exp(par[1])+exp(par[2])),
qbeta(c(0.025,0.975),exp(par[1]),exp(par[2]))) -
parameters["asymptomatic",1:3]) ^ 2)})$par)
# distribution parameters for death
PrDeathSymptom = c(parameters["cfr",1],
diff(as.numeric(parameters["cfr",2:3]))/1.96/2)
# set values of unknown parameters
# note that these values seem to maximize the probability of the cumulative
# deaths in the US as of March 8, 2020 predicted by the model
replicates = 1000
load("../results/sensitivity/param_estimates_posterior_1.rda", verbose=T)
indices = sample(1:length(PrCaseSymptom.trav_posterior), replicates, replace=TRUE)
PrCaseSymptom.trav = PrCaseSymptom.trav_posterior[indices]
asympRFraction = asympRFraction_posterior[indices]
# load the following to generate the objects used to generate the figures in the paper
load("../results/baseline_projections.rda",verbose=T)
# Cases results - processing
updateDaily = FALSE # turn on Bayesian daily updating
smoothSpline = FALSE # turn on smoothing spline
cases.mat = t(matrix(
unlist(lapply(local, function(x) x$cases)),
length(local[[1]]$cases),
replicates))
p.mat = matrix(NA,nrow(cases.mat),ncol(cases.mat))
cases.mat.obs = rbinom(length(cases.mat), as.vector(cases.mat), rowSums(propns.ASCF[,2:3]))
cases.mat.obs = matrix(cases.mat.obs, replicates, ncol(cases.mat))
for(ii in 1:nrow(cases.mat)){
alpha.old=1
beta.old=1
for(jj in 1:ncol(cases.mat)){
if(cases.mat[ii,jj]){
actual.cases = rbinom(1,cases.mat[ii,jj], sum(propns.ASCF[ii,2:3]))
alpha.new = alpha.old+cases.US.local[jj]
beta.new = beta.old+actual.cases-cases.US.local[jj]
p.mat[ii,jj] =
rbeta(1,alpha.new,max(1,beta.new))
if (updateDaily) {
alpha.old=alpha.new
beta.old=beta.new
}
}
}
if (smoothSpline) {
non.NA.indices = which(!is.na(p.mat[ii,]))
if(length(non.NA.indices) > ncol(p.mat) / 3){
temp.sp = smooth.spline((1:ncol(p.mat))[non.NA.indices],
logit(p.mat[ii,non.NA.indices]),
nknots=floor((ncol(p.mat) - non.NA.indices[1])/7 + 0.5))
p.mat[ii,non.NA.indices[1]:ncol(p.mat)] = inv.logit(predict(temp.sp, non.NA.indices[1]:ncol(p.mat))$y)
} else {
p.mat[ii,non.NA.indices[1]:ncol(p.mat)] = NA
}
}
}
testing = read.csv("../data/testing_ts.csv")
incomplete.days = testing$Day[!testing$Complete]
low.p = which.min(apply(p.mat,2,function(ii)median(ii,na.rm=T)))
dim(cases.mat)
dim(propns.ASCF)
c
c = cases.mat.obs[1,]
plot(c)
lines(testing)
plot(testing)
lines(cases.US.local)
apply(cases.mat,1,min)
plot(cases.US.local)
sapply(1:length(cases.US.local),function(ii)sum(cases.mat[,ii]<cases.US.local[ii]))/1000
plot(sapply(1:length(cases.US.local),function(ii)sum(cases.mat[,ii]<cases.US.local[ii]))/1000)
plot(sapply(1:length(cases.US.local),function(ii)sum(cases.mat[,ii]<cases.US.local[ii]))/1000,type='l')
plot(sapply(1:length(cases.US.local),function(ii)sum(cases.mat[,ii]<cases.US.local[ii]))/1000,type='l',xlab='Time',ylab='Proportion where cases.mat < cases.local')
library(mgcv)
g
g = gam(cases.US.local~s(cases.mat[1,]))
g = gam(cases.US.local~s(1:length(cases.US.local)))
df
df = data.frame(obs=cases.US.local,exp=cases.mat.obs[1,],day=1:length(cases.US.local))
head(df)
df = data.frame(obs=cases.US.local,exp=cases.mat.obs[1,],day=1:length(cases.US.local))
g = gam(obs~s(day))
g = gam(obs~s(day),data=df)
plot(g)
g = gam(obs~s(day)+offset(exp),data=df)
plot(g)
g = gam(obs~s(day)+offset(exp),data=df,family=quasibinomial())
g = gam(obs~s(day)+offset(exp),data=df,family=quasipoisson())
plot(g)
?quasipoisson
g = gam(obs~s(day),offset(exp),data=df,family=quasipoisson())
g = gam(obs~s(day),offset=exp,data=df,family=quasipoisson())
plot(g)
summary(g)
g$fitted.values
plot(g$fitted.values)
points(cases.US.local,col=2)
?predict.gam
p
p = predict.gam(g,newdata=df)
plot(p)
plot(exp(p))
plot(exp(p),type='l')
plot(exp(p),type='l',ylim=c(0,1))
p = exp(predict.gam(g,newdata=df))
dim(cases.mat)
p.mat = matrix(NA,nrow(cases.mat),ncol(cases.mat))
for(ii in 1:nrow(cases.mat)){
df = data.frame(
obs=cases.US.local,
exp=cases.mat.obs[ii,],
day=1:length(cases.US.local))
g = gam(obs~s(day),offset=exp,data=df,family=quasipoisson())
p.mat[ii,] = exp(predict.gam(g,newdata=df))
}
ii
plot(p.mat)
plot(p.mat[1,])
head(df)
tail(df)
plot(g)
g = gam(obs~s(day),offset=exp,data=df,family=quasipoisson())
plot(df$exp)
lines(df$obs,col=2)
p.mat = matrix(NA,nrow(cases.mat),ncol(cases.mat))
for(ii in 1:nrow(cases.mat)){
df = data.frame(
ratio = cases.US.local / cases.mat.obs[ii,],
# obs=cases.US.local,
# exp=cases.mat.obs[ii,],
day=1:length(cases.US.local))
g = gam(ratio~s(day),data=df,family=quasipoisson())
p.mat[ii,] = exp(predict.gam(g,newdata=df))
}
ii
head(df)
p.mat = matrix(NA,nrow(cases.mat),ncol(cases.mat))
for(ii in 1:nrow(cases.mat)){
df = data.frame(
obs=cases.US.local,
exp=cases.mat.obs[ii,],
day=1:length(cases.US.local))
g = gam(obs~s(day),offset=exp,data=df,family=quasipoisson())
p.mat[ii,] = exp(predict.gam(g,newdata=df))
}
p.mat = matrix(NA,nrow(cases.mat),ncol(cases.mat))
for(ii in 1:nrow(cases.mat)){
df = data.frame(
obs=cases.US.local,
exp=cases.mat.obs[ii,],
day=1:length(cases.US.local))
g = gam(obs~s(day)+offset(exp),data=df,family=quasipoisson())
p.mat[ii,] = exp(predict.gam(g,newdata=df))
}
ii
p.mat = matrix(NA,nrow(cases.mat),ncol(cases.mat))
for(ii in 1:nrow(cases.mat)){
df = data.frame(
obs=cases.US.local,
exp=cases.mat.obs[ii,],
day=1:length(cases.US.local))
g = gam(obs~s(day)+exp,data=df,family=quasipoisson())
p.mat[ii,] = exp(predict.gam(g,newdata=df))
}
ii
for(ii in 992:nrow(cases.mat)){
df = data.frame(
obs=cases.US.local,
exp=cases.mat.obs[ii,],
day=1:length(cases.US.local))
g = gam(obs~s(day)+exp,data=df,family=quasipoisson())
p.mat[ii,] = exp(predict.gam(g,newdata=df))
}
matplot(t(p.mat),type='l',lty=1)
points(cases.US.local,col=2,pch=19)
plot(p.mat[1,]/cases.mat[1,])
plot(p.mat[2,]/cases.mat[2,])
plot(p.mat[3,]/cases.mat[3,])
plot(p.mat[4,]/cases.mat[4,])
plot(p.mat[5,]/cases.mat[5,])
?predict.gam
p
p = predict.gam(g,newdata=df,type='terms')
p
p[,'s(day)']
plot(p[,'s(day)'])
plot(exp(p[,'s(day)']))
plot(exp(p[,'s(day)']),ylim=c(0,1))
coef(g)
coef(g)$Intercept
coef(g)['Intercept']
coef(g)[1]
coef(g)['(Intercept)']
plot(exp(coef(g)['(Intercept)']+p[,'s(day)']),ylim=c(0,1))
plot(p.mat[ii,])
plot(p.mat[ii,],ylim=c(0,1))
p.mat = matrix(NA,nrow(cases.mat),ncol(cases.mat))
for(ii in 1:nrow(cases.mat)){
df = data.frame(
obs=cases.US.local,
exp=cases.mat.obs[ii,],
day=1:length(cases.US.local))
g = gam(obs~s(day)+exp,data=df,family=quasipoisson())
p = predict.gam(g,newdata=df,type='terms')
p.mat[ii,] = exp(coef(g)['(Intercept)']+p[,'s(day)'])
}
ii
matplot(t(p.mat),type='l',lty=1)
matplot(t(p.mat),type='l',lty=1,ylim=c(0,1))
predict.gam(g,newdata=df,type='terms')['exp']
predict.gam(g,newdata=df,type='terms')[,'exp']
predict.gam(g,newdata=df)
plot(predict.gam(g,newdata=df) -
predict.gam(g,newdata=df,type='terms')[,'exp'])
)
plot(predict.gam(g,newdata=df) -
predict.gam(g,newdata=df,type='terms')[,'exp'])
g = gam(obs~s(day)+offset(exp),data=df,family=quasipoisson())
ii
ii=3
df = data.frame(
obs=cases.US.local,
exp=cases.mat.obs[ii,],
day=1:length(cases.US.local))
g = gam(obs~s(day)+offset(exp),data=df,family=quasipoisson())
df
df = df[-which(df$exp==0),]
g = gam(obs~s(day)+offset(exp),data=df,family=quasipoisson())
df
df$ratio = df$obs / df$exp
g = gam(ratio~s(day),data=df,family=quasipoisson())
plot(g)
df.orig = data.frame(
obs=cases.US.local,
exp=cases.mat.obs[ii,],
day=1:length(cases.US.local))
df = df.orig[-which(df.orig$exp==0),]
df$ratio = df$obs / df$exp
g = gam(ratio~s(day),data=df,family=quasipoisson())
exp(predict(g,newdata=df.orig))
plot(exp(predict(g,newdata=df.orig)))
plot(exp(predict(g,newdata=df.orig)),ylim=c(0,1))
p.mat = matrix(NA,nrow(cases.mat),ncol(cases.mat))
for(ii in 1:nrow(cases.mat)){
df.orig = data.frame(
obs=cases.US.local,
exp=cases.mat.obs[ii,],
day=1:length(cases.US.local))
df = df.orig[-which(df.orig$exp==0),]
df$ratio = df$obs / df$exp
g = gam(ratio~s(day),data=df,family=quasipoisson())
p.mat[ii,] = exp(predict(g,newdata=df.orig))
}
matplot(p.mat,type='l',lty=1)
matplot(t(p.mat),type='l',lty=1,ylim=c(0,1))
p.mat = matrix(NA,nrow(cases.mat),ncol(cases.mat))
for(ii in 1:nrow(cases.mat)){
df.orig = data.frame(
obs=cases.US.local,
exp=cases.mat.obs[ii,],
day=1:length(cases.US.local))
df = df.orig[-which(df.orig$exp==0),]
df$ratio = df$obs / df$exp
g = gam(ratio~s(day),data=df)
p.mat[ii,] = exp(predict(g,newdata=df.orig))
}
matplot(t(p.mat),type='l',lty=1,ylim=c(0,1))
matplot(t(log(p.mat)),type='l',lty=1,ylim=c(0,1))
dim(p.mat)
plot(colMeans(log(p.mat)),type='l')
p.mat = matrix(NA,nrow(cases.mat),ncol(cases.mat))
for(ii in 1:nrow(cases.mat)){
df.orig = data.frame(
obs=cases.US.local,
exp=cases.mat.obs[ii,],
day=1:length(cases.US.local))
df = df.orig[-which(df.orig$exp==0),]
df$ratio = df$obs / df$exp
g = gam(ratio~s(day),data=df)
p.mat[ii,] = predict(g,newdata=df.orig)
}
plot(colMeans(log(p.mat)),type='l')
matplot(t(log(p.mat)),type='l',lty=1,ylim=c(0,1))
p.mat = matrix(NA,nrow(cases.mat),ncol(cases.mat))
ii=1
df.orig = data.frame(
obs=cases.US.local,
exp=cases.mat.obs[ii,],
day=1:length(cases.US.local))
df = df.orig[-which(df.orig$exp==0),]
# df$ratio = df$obs / df$exp
g = gam(ratio~s(day)+offset(exp),data=df)
# df$ratio = df$obs / df$exp
g = gam(obs~s(day)+offset(exp),data=df)
plot(g)
predict(g,newdata=df.orig)
p.mat[ii,] = predict(g,newdata=df.orig,type='terms')
plot(p.mat[ii,])
p.mat[ii,] = predict(g,newdata=df.orig)
plot(p.mat[ii,])
# df$ratio = df$obs / df$exp
g = gam(obs~s(day)+offset(exp),data=df,family=poisson)
p.mat[ii,] = predict(g,newdata=df.orig)
plot(p.mat[ii,])
# df$ratio = df$obs / df$exp
g = gam(obs~s(day)+offset(exp),data=df,family=quasipoisson)
p.mat[ii,] = predict(g,newdata=df.orig)
plot(p.mat[ii,])
df$exp
df.orig$exp
p.mat[ii,] = exp(predict(g,newdata=df.orig))
plot(p.mat[ii,])
plot(p.mat[ii,]/df.orig$exp)
plot(p.mat[ii,]/df.orig$obs)
plot(df.orig$obs/p.mat[ii,])
plot(df.orig$obs/p.mat[ii,],ylim=c(0,1))
# Cases results - processing
updateDaily = FALSE # turn on Bayesian daily updating
smoothSpline = FALSE # turn on smoothing spline
cases.mat = t(matrix(
unlist(lapply(local, function(x) x$cases)),
length(local[[1]]$cases),
replicates))
p.mat = matrix(NA,nrow(cases.mat),ncol(cases.mat))
cases.mat.obs = rbinom(length(cases.mat), as.vector(cases.mat), rowSums(propns.ASCF[,2:3]))
cases.mat.obs = matrix(cases.mat.obs, replicates, ncol(cases.mat))
for(ii in 1:nrow(cases.mat)){
alpha.old=1
beta.old=1
for(jj in 1:ncol(cases.mat)){
if(cases.mat[ii,jj]){
actual.cases = rbinom(1,cases.mat[ii,jj], sum(propns.ASCF[ii,2:3]))
alpha.new = alpha.old+cases.US.local[jj]
beta.new = beta.old+actual.cases-cases.US.local[jj]
p.mat[ii,jj] =
rbeta(1,alpha.new,max(1,beta.new))
if (updateDaily) {
alpha.old=alpha.new
beta.old=beta.new
}
}
}
if (smoothSpline) {
non.NA.indices = which(!is.na(p.mat[ii,]))
if(length(non.NA.indices) > ncol(p.mat) / 3){
temp.sp = smooth.spline((1:ncol(p.mat))[non.NA.indices],
logit(p.mat[ii,non.NA.indices]),
nknots=floor((ncol(p.mat) - non.NA.indices[1])/7 + 0.5))
p.mat[ii,non.NA.indices[1]:ncol(p.mat)] = inv.logit(predict(temp.sp, non.NA.indices[1]:ncol(p.mat))$y)
} else {
p.mat[ii,non.NA.indices[1]:ncol(p.mat)] = NA
}
}
}
matplot(t(p.mat),type='l',lty=1)
plot(apply(p.mat,1,median),type='l')
plot(apply(p.mat,2,median),type='l')
plot(apply(p.mat,2,function(x)median(x,na.rm=T)),type='l')
plot(apply(p.mat,2,function(x)quantile(x,0.9,na.rm=T)),type='l')
plot(apply(p.mat,2,function(x)quantile(x,0.95,na.rm=T)),type='l')
plot(apply(p.mat,2,function(x)quantile(x,0.1,na.rm=T)),type='l')
plot(apply(p.mat,2,function(x)quantile(x,0.1,na.rm=T)),type='l',ylim=c(0,1))
lines(apply(p.mat,2,function(x)quantile(x,0.5,na.rm=T)),type='l',ylim=c(0,1))
lines(apply(p.mat,2,function(x)quantile(x,0.9,na.rm=T)),type='l',ylim=c(0,1))
lines(apply(p.mat,2,function(x)quantile(x,0.75,na.rm=T)),type='l',ylim=c(0,1))
lines(apply(p.mat,2,function(x)quantile(x,0.25,na.rm=T)),type='l',ylim=c(0,1))
matplot(t(cases.mat*p.mat),type='l',lty=1)
points(cases.US.local,col=2,pch=19,cex=0.4)
points(cases.US.local,col=2,pch=19,cex=0.8)
dim(cases.mat*p.mat)
hist(rowSums(cases.mat*p.mat),50,col='gray')
hist(rowSums(cases.mat*p.mat,na.rm=T),50,col='gray')
abline(v=sum(cases.US.local),col=2,lwd=2)
p.mat[is.na(p.mat)]=1
hist(rowSums(cases.mat*p.mat,na.rm=T),50,col='gray')
sum(is.na(p.mat))
dim(p.mat)
abline(v=sum(cases.US.local),col=2,lwd=2)
hist(rowSums(cases.mat*rowSums(propns.ASCF[,2:3])*p.mat,na.rm=T),50,col='gray')
abline(v=sum(cases.US.local),col=2,lwd=2)
# Cases results - processing
updateDaily = FALSE # turn on Bayesian daily updating
smoothSpline = FALSE # turn on smoothing spline
cases.mat = t(matrix(
unlist(lapply(local, function(x) x$cases)),
length(local[[1]]$cases),
replicates))
p.mat = matrix(NA,nrow(cases.mat),ncol(cases.mat))
cases.mat.obs = rbinom(length(cases.mat), as.vector(cases.mat), rowSums(propns.ASCF[,2:3]))
cases.mat.obs = matrix(cases.mat.obs, replicates, ncol(cases.mat))
for(ii in 1:nrow(cases.mat)){
alpha.old=1
beta.old=1
for(jj in 1:ncol(cases.mat)){
if(cases.mat[ii,jj]){
actual.cases = rbinom(1,cases.mat[ii,jj], sum(propns.ASCF[ii,2:3]))
alpha.new = alpha.old+cases.US.local[jj]
beta.new = beta.old+actual.cases-cases.US.local[jj]
p.mat[ii,jj] =
rbeta(1,alpha.new,max(1,beta.new))
if (updateDaily) {
alpha.old=alpha.new
beta.old=beta.new
}
}
}
if (smoothSpline) {
non.NA.indices = which(!is.na(p.mat[ii,]))
if(length(non.NA.indices) > ncol(p.mat) / 3){
temp.sp = smooth.spline((1:ncol(p.mat))[non.NA.indices],
logit(p.mat[ii,non.NA.indices]),
nknots=floor((ncol(p.mat) - non.NA.indices[1])/7 + 0.5))
p.mat[ii,non.NA.indices[1]:ncol(p.mat)] = inv.logit(predict(temp.sp, non.NA.indices[1]:ncol(p.mat))$y)
} else {
p.mat[ii,non.NA.indices[1]:ncol(p.mat)] = NA
}
}
}
hist(rowSums(cases.mat*rowSums(propns.ASCF[,2:3])*p.mat,na.rm=T),50,col='gray')
abline(v=sum(cases.US.local),col=2,lwd=2)
matplot(t(cases.mat*rowSums(propns.ASCF[,2:3])*p.mat),type='l',lty=1,col=rgb(0,0,0,0.1))
matplot(t(cases.mat*rowSums(propns.ASCF[,2:3])*p.mat),type='l',lty=1,col=rgb(0,0,0,0.1),ylim=c(0,1000))
points(cases.US.local,col=2,pch=19)
matplot(t(cases.mat*rowSums(propns.ASCF[,2:3])*p.mat),type='l',lty=1,col=rgb(0,0,0,0.1),ylim=c(0,500))
points(cases.US.local,col=2,pch=19)
matplot(t(cases.mat.obs*p.mat),type='l',lty=1,col=rgb(0,0,0,0.1),ylim=c(0,500))
points(cases.US.local,col=2,pch=19)
sum(under.lockdown)
x = rbinom(50,1,seq(0,1,length.out=50))
x
plot(x)
df = data.frame(y=y,x=1:length(y))
y = rbinom(50,1,seq(0,1,length.out=50))
df = data.frame(y=y,x=1:length(y))
plot(df)
y = rbinom(50,1,seq(0,1,length.out=50))
df = data.frame(y=y,x=1:length(y))
m = glm(y~x,data=df,family=binomial)
plot(m)
summary(m)
plot(df$x,m$fitted.values)
plot(df$x,m$fitted.values,ylim=c(0,1),type='l')
plot(df$x,df$y,ylim=c(0,1),type='l')
plot(df$x,df$y,ylim=c(0,1))
lines(df$x,m$fitted.values)
R=1
total = 0
onegen = rnbinom(1,mu=R,size=0.58)
onegen
function(R){
total = 0
onegen = rnbinom(1,mu=R,size=0.58)
total = total + onegen
if(onegen > 0){
total = total + sum(rnbinom(total,mu=R,size=0.58))
}
return(total)
}
simOneGen = function(R){
total = 0
onegen = rnbinom(1,mu=R,size=0.58)
total = total + onegen
if(onegen > 0){
total = total + sum(rnbinom(total,mu=R,size=0.58))
}
return(total)
}
simOneGen(1)
simOneGen(1)
simOneGen(1)
simOneGen(1)
?replicate
x = replicate(1e3,simOneGen(1))
mean(x)
x = replicate(1e3,simOneGen(1.1))
mean(x)
mean(replicate(1e3,simOneGen(1.1)))
mean(replicate(1e4,simOneGen(1)))
mean(replicate(1e4,simOneGen(1)))
mean(replicate(1e4,simOneGen(1)))
mean(replicate(1e4,simOneGen(1.5)))
mean(replicate(1e4,simOneGen(1.5)))
mean(replicate(1e4,simOneGen(1.5)))
mean(replicate(1e4,simOneGen(1.5)))
mean(replicate(1e4,simOneGen(1.5)))
1.5^2
1.5+1.5^2
1.5+1.5^1.5
1.5+1.5^1.5
1.5+1.5^2
summary(m)
length(seq(0,1,0.05))
21*21*200
